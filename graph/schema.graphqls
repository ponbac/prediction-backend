# Query root
type Query {
  users: [User!]!
  games: [Game!]!
  groups: [Group!]!
  teams: [Team!]!
  predictions: [Prediction!]!
}

type User {
  id: ID!
  name: String!
  description: String
  score: Int!
  avatar: String
  prediction: Prediction
}

type Prediction {
  user: User!
  groupPredictions: [GroupPrediction]
  gamePredictions: [GamePrediction]
}

type GroupPrediction {
  group: Group!
  ordering: [Team!]!
}

type GamePrediction {
  game: Game!
  winner: Team!
  homeScore: Int!
  awayScore: Int!
}

type Game {
  id: ID!
  homeTeam: Team!
  awayTeam: Team!
  homeScore: Int
  awayScore: Int
  winner: Team!
  finished: Boolean!
  startTime: String!
}

type Group {
  id: String!
  teams: [Team!]!
  games: [Game!]!
  results: [Team!]
}

type Team {
  id: ID!
  name: String!
  logo: String!
  games: [Game!]!
}

# Mutation root
type Mutation {
  upsertUser(input: UserInput!): User!
  upsertPrediction(input: PredictionInput!): Prediction!
  upsertGame(input: GameInput!): Game!
  upsertGroup(input: GroupInput!): Group!
  upsertTeam(input: TeamInput!): Team!
}

input UserInput {
  id: ID
  name: String
  description: String
  score: Int
  avatar: String
  prediction: PredictionInput
}

input GroupPredictionInput {
  group: String!
  ordering: [ID!]!
}

input GamePredictionInput {
  game: ID!
  winner: ID!
  homeScore: Int!
  awayScore: Int!
}

input PredictionInput {
  user: UserInput!
  groupPredictions: [GroupPredictionInput]
  gamePredictions: [GamePredictionInput]
}

input GameInput {
  id: ID!
  homeTeam: ID!
  awayTeam: ID!
  homeScore: Int
  awayScore: Int
  winner: ID
  finished: Boolean!
  startTime: String
}

input GroupInput {
  id: String!
  teams: [ID!]
  games: [ID!]
  results: [ID!]
}

input TeamInput {
  id: ID!
  name: String!
  logo: String!
  games: [ID!]
}